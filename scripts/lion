#!/usr/bin/env bash
# Control the Lion service.
# Written by Tiger Sachse.

COG_DIR="cogs"
DOCS_DIR="docs"
DATA_DIR="data"
INSTALL_DIR="/opt"
PACKAGE_NAME="lion"
ENABLED_DIR="enabled"
DISABLED_DIR="disabled"
VERSION_FILE="VERSION.txt"
SERVICE_FILE="lion.service"
TOKEN_PATH="$INSTALL_DIR/$PACKAGE_NAME/$DATA_DIR/discord.token"

# Add a token for the service.
add_token() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi
    echo "Adding token..."
    echo $1 > $TOKEN_PATH
}

# Start the service.
start_service() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi
    echo "Starting Lion..."
    systemctl start $SERVICE_FILE
}

# Stop the service.
stop_service() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi
    echo "Stopping Lion..."
    systemctl stop $SERVICE_FILE
}

# Restart the service.
restart_service() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi
    echo "Restarting Lion..."
    systemctl restart $SERVICE_FILE
}

# Enable the service.
enable_service() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi
    echo "Enabling Lion..."
    systemctl enable $SERVICE_FILE
}

# Disable the service.
disable_service() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi
    echo "Disabling Lion..."
    systemctl disable $SERVICE_FILE
}

# Get the status of the service.
get_service_status() {
    echo "Getting Lion's status..."
    systemctl status $SERVICE_FILE
}

# Show this service's version and related information.
show_version() {
    cat "$INSTALL_DIR/$PACKAGE_NAME/$DOCS_DIR/$VERSION_FILE"
}

# Show the most recent log entries by this service.
show_log() {
    journalctl -b -u $SERVICE_FILE
}

# Show a simple help message.
show_help() {
    printf "Command syntax:\n    $ lion [--flag] <parameters>\n\n"
    echo "Check out https://github.com/tgsachse/lion for all available flags."
}

# Enable installed cogs.
enable_cogs() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi

    ENABLED_COG=false
    for COG in "$@"; do
        COG_PATH="$INSTALL_DIR/$PACKAGE_NAME/$COG_DIR/$COG"
        if [ -d $COG_PATH ]; then
            if [ ! -L "$INSTALL_DIR/$PACKAGE_NAME/$ENABLED_DIR/$COG" ]; then
                ln -s $COG_PATH "$INSTALL_DIR/$PACKAGE_NAME/$ENABLED_DIR"
                rm -f "$INSTALL_DIR/$PACKAGE_NAME/$DISABLED_DIR/$COG"
                echo "Enabled cog: $COG"
                ENABLED_COG=true
            else
                echo "Cog already enabled: $COG"
            fi
        else
            echo "Cog not found: $COG"
        fi
    done

    if [ "$ENABLED_COG" = true ]; then
        printf "\nYou should restart the bot for changes to take effect.\n"
    fi
}

## Disable unwanted cogs.
disable_cogs() {
    if [[ $EUID -ne 0 ]]; then
        echo "You must run this function as a root user (or with sudo)."
        exit 1
    fi

    DISABLED_COG=false
    for COG in "$@"; do
        COG_PATH="$INSTALL_DIR/$PACKAGE_NAME/$COG_DIR/$COG"
        if [ -d $COG_PATH ]; then
            if [ ! -L "$INSTALL_DIR/$PACKAGE_NAME/$DISABLED_DIR/$COG" ]; then
                ln -s $COG_PATH "$INSTALL_DIR/$PACKAGE_NAME/$DISABLED_DIR"
                rm -f "$INSTALL_DIR/$PACKAGE_NAME/$ENABLED_DIR/$COG"
                echo "Disabled cog: $COG"
                DISABLED_COG=true
            else
                echo "Cog already disabled: $COG"
            fi
        else
            echo "Cog not found: $COG"
        fi
    done

    if [ "$DISABLED_COG" = true ]; then
        printf "\nYou should restart the bot for changes to take effect.\n"
    fi
}

# List installed cogs.
list_cogs() {
    HEADER="Available cogs:"
    TARGET_DIR="$INSTALL_DIR/$PACKAGE_NAME/$COG_DIR"
    if [ "$1" == "--enabled" ]; then
        HEADER="Enabled cogs:"
        TARGET_DIR="$INSTALL_DIR/$PACKAGE_NAME/$ENABLED_DIR"
    elif [ "$1" == "--disabled" ]; then
        HEADER="Disabled cogs:"
        TARGET_DIR="$INSTALL_DIR/$PACKAGE_NAME/$DISABLED_DIR"
    fi

    if [ "$(ls -A $TARGET_DIR)" ]; then
        echo $HEADER
        for COG_PATH in $TARGET_DIR/*; do
            COG=$(basename "$COG_PATH")
            echo "  $COG"
        done
    else
        echo "No cogs found!"
    fi
}

# Main entry point to the script.
case $1 in
    --token)
        add_token $2
        ;;
    --start)
        start_service
        ;;
    --stop)
        stop_service
        ;;
    --restart)
        restart_service
        ;;
    --enable)
        enable_service
        ;;
    --disable)
        disable_service
        ;;
    --status)
        get_service_status
        ;;
    --version)
        show_version
        ;;
    --log)
        show_log
        ;;
    --cogs)
        case $2 in
            --enable)
                enable_cogs "${@:3}"
                ;;
            --disable)
                disable_cogs "${@:3}"
                ;;
            --list)
                list_cogs $3
                ;;
            *)
                show_help
                ;;
        esac
        ;;
    --help|*)
        show_help
        ;;
esac
